// Copyright (c) 2016, XMOS Ltd, All rights reserved

#include <platform.h>
#include <string.h>
#include "debug_print.h"
#include <xtcp.h>
#include "xtcp_stack.h"
#include <stdlib.h>
#include <xassert.h>

#include "otp_board_info.h"
#include "ethernet.h"
#include "smi.h"

#if SLICEKIT_L16
// Here are the port definitions required by ethernet. This port assignment
// is for the L16 sliceKIT with the ethernet slice plugged into the
// CIRCLE slot.
port p_eth_rxclk  = on tile[1]: XS1_PORT_1J;
port p_eth_rxd    = on tile[1]: XS1_PORT_4E;
port p_eth_txd    = on tile[1]: XS1_PORT_4F;
port p_eth_rxdv   = on tile[1]: XS1_PORT_1K;
port p_eth_txen   = on tile[1]: XS1_PORT_1L;
port p_eth_txclk  = on tile[1]: XS1_PORT_1I;
port p_eth_int    = on tile[1]: XS1_PORT_1O;
port p_eth_rxerr  = on tile[1]: XS1_PORT_1P;
port p_eth_timing = on tile[1]: XS1_PORT_8C;

clock eth_rxclk   = on tile[1]: XS1_CLKBLK_1;
clock eth_txclk   = on tile[1]: XS1_CLKBLK_2;

// SMI
port p_smi_mdio = on tile[1]: XS1_PORT_1M;
port p_smi_mdc  = on tile[1]: XS1_PORT_1N;

// These ports are for accessing the OTP memory
otp_ports_t otp_ports = on tile[1]: OTP_PORTS_INITIALIZER;

xtcp_ipconfig_t ipconfig = {
        { 192, 168,   1, 196 }, // ip address (eg 192,168,0,2)
        { 255, 255, 255,   0 }, // netmask    (eg 255,255,255,0)
        {   0,   0,   0,   0 }  // gateway    (eg 192,168,0,1)
};
#elif EXPLORER_KIT

// eXplorerKIT RGMII port map
otp_ports_t otp_ports = on tile[0]: OTP_PORTS_INITIALIZER;

rgmii_ports_t rgmii_ports = on tile[1]: RGMII_PORTS_INITIALIZER;

port p_smi_mdio   = on tile[1]: XS1_PORT_1C;
port p_smi_mdc    = on tile[1]: XS1_PORT_1D;
port p_eth_reset  = on tile[1]: XS1_PORT_1N;

xtcp_ipconfig_t ipconfig = {
        { 192, 168,   1, 198 }, // ip address (eg 192,168,0,2)
        { 255, 255, 255,   0 }, // netmask    (eg 255,255,255,0)
        {   0,   0,   0,   0 }  // gateway    (eg 192,168,0,1)
};
#elif MIC_ARRAY

// Microphone array reference design
port p_eth_rxclk  = on tile[1]: XS1_PORT_1A;
port p_eth_rxd    = on tile[1]: XS1_PORT_4A;
port p_eth_txd    = on tile[1]: XS1_PORT_4B;
port p_eth_rxdv   = on tile[1]: XS1_PORT_1C;
port p_eth_txen   = on tile[1]: XS1_PORT_1D;
port p_eth_txclk  = on tile[1]: XS1_PORT_1B;
port p_eth_rxerr  = on tile[1]: XS1_PORT_1K;
port p_eth_timing = on tile[1]: XS1_PORT_8C;

clock eth_rxclk   = on tile[1]: XS1_CLKBLK_1;
clock eth_txclk   = on tile[1]: XS1_CLKBLK_2;

// SMI
port p_smi        = on tile[1]: XS1_PORT_4C; // Bit 0: MDC, Bit 1: MDIO

// OTP
otp_ports_t otp_ports = on tile[1]: OTP_PORTS_INITIALIZER;

port p_rst_shared = on tile[1]: XS1_PORT_4F; // Bit 0: DAC_RST_N, Bit 1: ETH_RST_N

xtcp_ipconfig_t ipconfig = {
        { 192, 168,   1, 197 }, // ip address (eg 192,168,0,2)
        { 255, 255, 255,   0 }, // netmask    (eg 255,255,255,0)
        {   0,   0,   0,   0 }  // gateway    (eg 192,168,0,1)
};
#else

#error "Unknown board"

#endif

// Defines
#define RX_BUFFER_SIZE 1460
#define INCOMING_PORT 15533
#define INIT_VAL -1

#ifndef OPEN_PORTS_PER_PROCESS
#define OPEN_PORTS_PER_PROCESS 1
#endif

#ifndef REFLECT_PROCESSES
#define REFLECT_PROCESSES 1
#endif

#ifndef PROTOCOL
#define PROTOCOL XTCP_PROTOCOL_UDP
#endif

#if EXPLORER_KIT
// An enum to manage the array of connections from the ethernet component
// to its clients.
enum eth_clients {
  ETH_TO_XTCP,
  NUM_ETH_CLIENTS
};

enum cfg_clients {
  CFG_TO_XTCP,
  CFG_TO_PHY_DRIVER,
  NUM_CFG_CLIENTS
};

[[combinable]]
void ar8035_phy_driver(client interface smi_if smi,
                client interface ethernet_cfg_if eth) {
  ethernet_link_state_t link_state = ETHERNET_LINK_DOWN;
  //ethernet_speed_t link_speed = LINK_1000_MBPS_FULL_DUPLEX;
  ethernet_speed_t link_speed = LINK_100_MBPS_FULL_DUPLEX;
  const int phy_reset_delay_ms = 1;
  const int link_poll_period_ms = 1000;
  const int phy_address = 0x4;
  timer tmr;
  int t;
  tmr :> t;
  p_eth_reset <: 0;
  delay_milliseconds(phy_reset_delay_ms);
  p_eth_reset <: 1;

  while (smi_phy_is_powered_down(smi, phy_address));
  //smi_configure(smi, phy_address, LINK_1000_MBPS_FULL_DUPLEX, SMI_ENABLE_AUTONEG);
  smi_configure(smi, phy_address, LINK_100_MBPS_FULL_DUPLEX, SMI_ENABLE_AUTONEG);

  while (1) {
    select {
    case tmr when timerafter(t) :> t:
      ethernet_link_state_t new_state = smi_get_link_state(smi, phy_address);
      // Read AR8035 status register bits 15:14 to get the current link speed
      if (new_state == ETHERNET_LINK_UP) {
        link_speed = (ethernet_speed_t)(smi.read_reg(phy_address, 0x11) >> 14) & 3;
      }
      if (new_state != link_state) {
        link_state = new_state;
        eth.set_link_state(0, new_state, link_speed);
      }
      t += link_poll_period_ms * XS1_TIMER_KHZ;
      break;
    }
  }
}

#endif  //EXPLORER_KIT

// Structure to hold connection state
typedef struct reflect_state_t {
  int active;      //< Whether this state structure is being used
                   //  for a connection
  int conn_id;     //< The connection id
} reflect_state_t;

/** Simple UDP reflection thread.
 *
 * This thread does two things:
 *
 *   - Reponds to incoming packets on port INCOMING_PORT and
 *     with a packet with the same content back to the sender.
 *   - Periodically sends out a fixed packet to a broadcast IP address.
 *
 */
void udp_reflect(client xtcp_if i_xtcp, int start_port)
{
  debug_printf("OPEN_PORTS_PER_PROCESS %d\n", OPEN_PORTS_PER_PROCESS);
  // A temporary variable to hold connections associated with an event
  xtcp_connection_t conn;

  // So we can handle multiple connections in one process
  reflect_state_t connection_states[OPEN_PORTS_PER_PROCESS];

  // The buffers for incoming data and outgoing responses
  // char rx_buffer[OPEN_PORTS_PER_PROCESS][RX_BUFFER_SIZE];
  char tx_buffer[OPEN_PORTS_PER_PROCESS][RX_BUFFER_SIZE];
  int response_lens[OPEN_PORTS_PER_PROCESS];

  // Instruct server to listen and create new connections on the incoming port
  for(int i=start_port; i<start_port+OPEN_PORTS_PER_PROCESS; i++) {
    debug_printf("Listening on port: %d\n", i);
    //xtcp_listen(c_xtcp, i, PROTOCOL);
    i_xtcp.listen(i, PROTOCOL);
  }

  for(int i=0; i<OPEN_PORTS_PER_PROCESS; i++ ) {
    connection_states[i].active = 0;
    connection_states[i].conn_id = INIT_VAL;

    for(int r=0; r<RX_BUFFER_SIZE; r++ ) {
      //rx_buffer[i][r] = 'z';
    }
  }

  unsigned data_len = 0;
  char rx_tmp[RX_BUFFER_SIZE];

  while (1) {
    select {

    // Respond to an event from the tcp server
    case i_xtcp.packet_ready():
      i_xtcp.get_packet(conn, rx_tmp, RX_BUFFER_SIZE, data_len);
      switch (conn.event)
        {
        case XTCP_IFUP:
          debug_printf("IFUP\n");
          break;

        case XTCP_IFDOWN:
          // Tidy up and close any connections we have open
          debug_printf("IFDOWN\n");
          for (int i=0; i<OPEN_PORTS_PER_PROCESS; i++ ) {
            if (connection_states[i].active) {
              connection_states[i].active = 0;
              connection_states[i].conn_id = INIT_VAL;
            }
          }
          break;

        case XTCP_NEW_CONNECTION:
          int k;
          // Try and find an empty connection slot
          for (k=0;k<OPEN_PORTS_PER_PROCESS;k++) {
            if (!connection_states[k].active) {
              break;
            }
          }

          xassert( start_port <= conn.local_port && conn.local_port < start_port+OPEN_PORTS_PER_PROCESS );

          if (k == OPEN_PORTS_PER_PROCESS) {
            // If no free connection slots were found, abort the connection
            // debug_printf("Connection aborted on port: %d\n", conn.local_port);
            // xtcp_abort(c_xtcp, conn);
            i_xtcp.abort(conn);
          } else {
            // debug_printf("Connection established on port: %d with id %d\n", conn.local_port, k);
            // Otherwise, assign the connection to a slot
            connection_states[k].active = 1;
            connection_states[k].conn_id = conn.id;
            // xtcp_set_connection_appstate(
            //     c_xtcp,
            //     conn,
            //     (xtcp_appstate_t) &connection_states[k]);
            i_xtcp.set_appstate(conn, (xtcp_appstate_t) &connection_states[k]);
          }
          break;

        case XTCP_RECV_DATA:
          for (int j=0;j<OPEN_PORTS_PER_PROCESS;j++) {
            if (connection_states[j].conn_id == conn.id) {
              // debug_printf("Sending data on port %d\n", conn.local_port);
              // xtcp_send(c_xtcp, tx_buffer[j], response_lens[j]);

              // memcpy(tx_buffer[j],rx_tmp,data_len);
              for(int i=0;i<data_len;i++) {
                const int reverse_i = (data_len-1)-i;
                tx_buffer[j][i] = rx_tmp[reverse_i];
              }
              response_lens[j]=data_len;
              i_xtcp.send(conn,tx_buffer[j],response_lens[j]);
              break;
            }
          }
          break;

        case XTCP_RESEND_DATA:
          for (int j=0;j<OPEN_PORTS_PER_PROCESS;j++) {
            if (connection_states[j].conn_id == conn.id) {

              // debug_printf("Sending data on port %d\n", conn.local_port);
              // xtcp_send(c_xtcp, tx_buffer[j], response_lens[j]);
              i_xtcp.send(conn, tx_buffer[j], response_lens[j]);
              break;
            }
          }
          break;

        case XTCP_SENT_DATA:
          // When a reponse is sent, the connection is closed opening up
          // for another new connection on the listening port
          // debug_printf("Data sent to port %d, completing send\n", conn.local_port);
          // xtcp_complete_send(c_xtcp);

          if(PROTOCOL == XTCP_PROTOCOL_UDP) {
            // xtcp_close(c_xtcp, conn);
            //i_xtcp.close(conn);
          }

          break;

        case XTCP_TIMED_OUT:
        case XTCP_ABORTED:
        case XTCP_CLOSED:
          // debug_printf("Closed connection: %d on port %d\n", conn.id, conn.local_port);
          if(PROTOCOL == XTCP_PROTOCOL_TCP) {
            // xtcp_close(c_xtcp, conn);
            // i_xtcp.close(conn);
          }

          for (int t=0; t<OPEN_PORTS_PER_PROCESS; t++ ) {
            // Slight hack to kill off process once python script finishes
            if(rx_tmp[0] == 'a') {
              exit(0);
            }

            if (connection_states[t].conn_id == conn.id) {
              connection_states[t].active = 0;
              connection_states[t].conn_id = INIT_VAL;
              response_lens[t] = INIT_VAL;
              break;
            }
          }

          break;
      }
      break;
    }
  }
}

#define XTCP_MII_BUFSIZE (4096)
#define ETHERNET_SMI_PHY_ADDRESS (0)

/*#if SLICEKIT_L16 || MIC_ARRAY
int main(void) {
  xtcp_if i_xtcp[REFLECT_PROCESSES];
  smi_if i_smi;

#if RAW
  mii_if i_mii;
  par {
    on tile[1]: mii(i_mii, p_eth_rxclk, p_eth_rxerr, p_eth_rxd, p_eth_rxdv,
                    p_eth_txclk, p_eth_txen, p_eth_txd, p_eth_timing,
                    eth_rxclk, eth_txclk, XTCP_MII_BUFSIZE)

#else // ETH
  ethernet_cfg_if i_cfg[1];
  ethernet_rx_if i_rx[1];
  ethernet_tx_if i_tx[1];
  par {
    on tile[1]: mii_ethernet_mac(i_cfg, 1, i_rx, 1, i_tx, 1,
                                 p_eth_rxclk, p_eth_rxerr, p_eth_rxd, p_eth_rxdv,
                                 p_eth_txclk, p_eth_txen, p_eth_txd, p_eth_timing,
                                 eth_rxclk, eth_txclk, XTCP_MII_BUFSIZE);
#endif

#if SLICEKIT_L16
    on tile[1]: smi(i_smi, p_smi_mdio, p_smi_mdc);
#else // MIC_ARRAY
    on tile[1]: [[distribute]] smi_singleport(i_smi, p_smi, 1, 0);
#endif

    on tile[1]: {
#if MIC_ARRAY
      p_rst_shared <: 0xF;
#endif

#if RAW
      xtcp(i_xtcp, REFLECT_PROCESSES, i_mii,
           null, null, null,
           i_smi, ETHERNET_SMI_PHY_ADDRESS,
           null, otp_ports, ipconfig);
#else // ETH
      xtcp_lwip(i_xtcp, REFLECT_PROCESSES, null,
           i_cfg[0], i_rx[0], i_tx[0],
           i_smi, ETHERNET_SMI_PHY_ADDRESS,
           null, otp_ports, ipconfig);
#endif
    }

    par (int i=0; i<REFLECT_PROCESSES; i++) {
      on tile[0]: udp_reflect(i_xtcp[i], INCOMING_PORT+(i*10));
    }
  }
  return 0;
}

#else
#endif*/

#if EXPLORER_KIT
int main(void) {
#if XTCP_STACK_LWIP
  xtcp_if i_xtcp[REFLECT_PROCESSES];
  ethernet_cfg_if i_cfg[NUM_CFG_CLIENTS];
  ethernet_rx_if i_rx[NUM_ETH_CLIENTS];
  ethernet_tx_if i_tx[NUM_ETH_CLIENTS];
  streaming chan c_rgmii_cfg;
  smi_if i_smi;

  par {

    on tile[1]: rgmii_ethernet_mac(i_rx, NUM_ETH_CLIENTS,
                                         i_tx, NUM_ETH_CLIENTS,
                                         null, null,
                                         c_rgmii_cfg,
                                         rgmii_ports,
                                         ETHERNET_DISABLE_SHAPER);

    on tile[1].core[0]: rgmii_ethernet_mac_config(i_cfg, NUM_CFG_CLIENTS, c_rgmii_cfg);

    on tile[1].core[0]: ar8035_phy_driver(i_smi, i_cfg[CFG_TO_PHY_DRIVER]);

    on tile[1]: smi(i_smi, p_smi_mdio, p_smi_mdc);

    on tile[0]: xtcp_lwip(i_xtcp, REFLECT_PROCESSES, null,
                      i_cfg[CFG_TO_XTCP], i_rx[ETH_TO_XTCP], i_tx[ETH_TO_XTCP],
                      null, ETHERNET_SMI_PHY_ADDRESS,
                      null, otp_ports, ipconfig);

    // The simple udp reflector thread
    par (int i=0; i<REFLECT_PROCESSES; i++) {
      on tile[0]: udp_reflect(i_xtcp[i], INCOMING_PORT+(i*10));
    }

  }
  return 0;
}
#elif XTCP_STACK_UIP
  xtcp_if i_xtcp[REFLECT_PROCESSES];
  ethernet_cfg_if i_cfg[NUM_CFG_CLIENTS];
  ethernet_rx_if i_rx[NUM_ETH_CLIENTS];
  ethernet_tx_if i_tx[NUM_ETH_CLIENTS];
  streaming chan c_rgmii_cfg;
  smi_if i_smi;

  par {

    on tile[1]: rgmii_ethernet_mac(i_rx, NUM_ETH_CLIENTS,
                                         i_tx, NUM_ETH_CLIENTS,
                                         null, null,
                                         c_rgmii_cfg,
                                         rgmii_ports,
                                         ETHERNET_DISABLE_SHAPER);

    on tile[1].core[0]: rgmii_ethernet_mac_config(i_cfg, NUM_CFG_CLIENTS, c_rgmii_cfg);

    on tile[1].core[0]: ar8035_phy_driver(i_smi, i_cfg[CFG_TO_PHY_DRIVER]);

    on tile[1]: smi(i_smi, p_smi_mdio, p_smi_mdc);

    on tile[0]: xtcp_uip(i_xtcp, REFLECT_PROCESSES, null,
                      i_cfg[CFG_TO_XTCP], i_rx[ETH_TO_XTCP], i_tx[ETH_TO_XTCP],
                      null, ETHERNET_SMI_PHY_ADDRESS,
                      null, otp_ports, ipconfig);

    // The simple udp reflector thread
    par (int i=0; i<REFLECT_PROCESSES; i++) {
      on tile[0]: udp_reflect(i_xtcp[i], INCOMING_PORT+(i*10));
    }

  }
  return 0;
}
#else
#error "Unknown XTCP Stack"
#endif
#elif SLICEKIT_L16
int main(void) {
  xtcp_if i_xtcp[REFLECT_PROCESSES];
  ethernet_cfg_if i_cfg[1];
  ethernet_rx_if i_rx[1];
  ethernet_tx_if i_tx[1];
  streaming chan c_rgmii_cfg;
  smi_if i_smi;

  par {
    on tile[1]: mii_ethernet_mac(i_cfg, 1, i_rx, 1, i_tx, 1,
                                 p_eth_rxclk, p_eth_rxerr, p_eth_rxd, p_eth_rxdv,
                                 p_eth_txclk, p_eth_txen, p_eth_txd, p_eth_timing,
                                 eth_rxclk, eth_txclk, XTCP_MII_BUFSIZE);

    on tile[1]: smi(i_smi, p_smi_mdio, p_smi_mdc);

    on tile[1]: xtcp_uip(i_xtcp, REFLECT_PROCESSES, null,
                          i_cfg[0], i_rx[0], i_tx[0],
                          i_smi, ETHERNET_SMI_PHY_ADDRESS,
                          null, otp_ports, ipconfig);

    // The simple udp reflector thread
    par (int i=0; i<REFLECT_PROCESSES; i++) {
      on tile[0]: udp_reflect(i_xtcp[i], INCOMING_PORT+(i*10));
    }

  }
  return 0;
}
#elif MIC_ARRAY
#if XTCP_STACK_LWIP
int main(void) {
  xtcp_if i_xtcp[REFLECT_PROCESSES];
  ethernet_cfg_if i_cfg[1];
  ethernet_rx_if i_rx[1];
  ethernet_tx_if i_tx[1];
  streaming chan c_rgmii_cfg;
  smi_if i_smi;

  par {
    on tile[1]: mii_ethernet_mac(i_cfg, 1, i_rx, 1, i_tx, 1,
                                 p_eth_rxclk, p_eth_rxerr, p_eth_rxd, p_eth_rxdv,
                                 p_eth_txclk, p_eth_txen, p_eth_txd, p_eth_timing,
                                 eth_rxclk, eth_txclk, XTCP_MII_BUFSIZE);

    on tile[1]: [[distribute]] smi_singleport(i_smi, p_smi, 1, 0);

    on tile[1]: {
      p_rst_shared <: 0xF;

      xtcp_lwip(i_xtcp, REFLECT_PROCESSES, null,
                i_cfg[0], i_rx[0], i_tx[0],
                i_smi, ETHERNET_SMI_PHY_ADDRESS,
                null, otp_ports, ipconfig);
    }

    // The simple udp reflector thread
    par (int i=0; i<REFLECT_PROCESSES; i++) {
      on tile[0]: udp_reflect(i_xtcp[i], INCOMING_PORT+(i*10));
    }

  }
  return 0;
}
#elif XTCP_STACK_UIP
int main(void) {
  xtcp_if i_xtcp[REFLECT_PROCESSES];
  ethernet_cfg_if i_cfg[1];
  ethernet_rx_if i_rx[1];
  ethernet_tx_if i_tx[1];
  streaming chan c_rgmii_cfg;
  smi_if i_smi;

  par {
    on tile[1]: mii_ethernet_mac(i_cfg, 1, i_rx, 1, i_tx, 1,
                                 p_eth_rxclk, p_eth_rxerr, p_eth_rxd, p_eth_rxdv,
                                 p_eth_txclk, p_eth_txen, p_eth_txd, p_eth_timing,
                                 eth_rxclk, eth_txclk, XTCP_MII_BUFSIZE);

    on tile[1]: [[distribute]] smi_singleport(i_smi, p_smi, 1, 0);

    on tile[1]: {
      p_rst_shared <: 0xF;

      xtcp_uip(i_xtcp, REFLECT_PROCESSES, null,
                i_cfg[0], i_rx[0], i_tx[0],
                i_smi, ETHERNET_SMI_PHY_ADDRESS,
                null, otp_ports, ipconfig);
    }

    // The simple udp reflector thread
    par (int i=0; i<REFLECT_PROCESSES; i++) {
      on tile[0]: udp_reflect(i_xtcp[i], INCOMING_PORT+(i*10));
    }

  }
  return 0;
}
#else
#error "Unknown XTCP Implementation"
#endif
#else
#error "Unknown board type"
#endif
